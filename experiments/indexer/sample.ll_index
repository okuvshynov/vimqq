Here's a description of each file in the input:

<file>
<index>1</index>
<path>tests/libtest.vim</path>
<summary>
This file contains a Vim script function named 'VQQCompareChats' that compares two lists of chat content. The function checks if the lengths of the input lists are equal and then compares each line after replacing timestamps with "00:00". It returns 0 if the contents match and 1 otherwise. This function is likely used for testing purposes to verify chat output in the VimQQ plugin.
</summary>
</file>

<file>
<index>2</index>
<path>tests/data/queue.vim</path>
<summary>
This is a test script for the VimQQ plugin. It sources a library file, defines a 'WriteAndQuit' function that compares the current buffer content with an expected output file, and executes two mock queries (:Q @mock hello and :Q @mock world!). After a short delay, it calls the 'WriteAndQuit' function to verify the results. This test likely checks the queuing functionality of the plugin.
</summary>
</file>

<file>
<index>3</index>
<path>tests/data/warmup_open.vim</path>
<summary>
This test script enables auto-warmup for the first Llama server, sources a library file, and defines a 'WriteAndQuit' function. It executes a mock query (:Q @mock hello) and compares the result with an expected output after a short delay. This test likely verifies the auto-warmup functionality of the VimQQ plugin.
</summary>
</file>

<file>
<index>4</index>
<path>tests/data/query_twice.vim</path>
<summary>
This test script sources a library file and defines two functions: 'WriteAndQuit' and 'AskNew'. It executes two mock queries in sequence (:Q @mock hello followed by :Q @mock world!) and compares the final result with an expected output. This test likely checks the plugin's behavior when executing multiple queries in succession.
</summary>
</file>

<file>
<index>5</index>
<path>tests/data/selection.vim</path>
<summary>
This test script focuses on testing the visual selection functionality of the VimQQ plugin. It creates a range of numbers, selects them visually, and then executes a mock query on the selection (:QQ -s @mock hello). After a short delay, it compares the result with an expected output file.
</summary>
</file>

<file>
<index>6</index>
<path>tests/data/chat_list_one.vim</path>
<summary>
This test script is similar to the selection test but includes an additional step of closing the chat window before comparing the results. It creates a range of numbers, selects them visually, executes a mock query on the selection, and then closes the chat window before comparing the output with an expected result.
</summary>
</file>

<file>
<index>7</index>
<path>tests/data/new_chat_nodelay.vim</path>
<summary>
This test script executes two mock queries in quick succession, with the second query explicitly starting a new chat (:Q @mock hello followed by :Q -n @mock world!). It then compares the result with an expected output file. This test likely verifies the plugin's behavior when starting a new chat without delay between queries.
</summary>
</file>

<file>
<index>8</index>
<path>tests/data/new_chat.vim</path>
<summary>
This test script is similar to the new_chat_nodelay test but introduces a delay between the two queries. It executes one mock query, waits for a short period, then executes a second query in a new chat. Finally, it compares the result with an expected output file. This test likely checks the plugin's behavior when starting a new chat with a delay between queries.
</summary>
</file>

<file>
<index>9</index>
<path>tests/data/query.vim</path>
<summary>
This is a simple test script that executes a single mock query (:Q @mock hello) and compares the result with an expected output file after a short delay. It's likely used to test the basic query functionality of the VimQQ plugin.
</summary>
</file>

<file>
<index>10</index>
<path>tests/data/warmup.vim</path>
<summary>
This test script executes two mock queries: one with a warmup flag (:Q -w @mock hello) followed by a regular query (:Q @mock hello). It then compares the result with an expected output file. This test likely verifies the warmup functionality of the VimQQ plugin.
</summary>
</file>

<file>
<index>11</index>
<path>plugin/vimqq.vim</path>
<summary>
This is the main plugin file for VimQQ. It defines several commands for interacting with the plugin:
1. QQ: A universal command for sending queries with various options.
2. Q: A simplified version of QQ.
3. QF: A command to fork the current chat.
4. QQList: Shows the list of chats.
5. QQOpenChat: Opens a specific chat.
6. QQToggle: Toggles the chat window.
7. QE: Records a subjective evaluation of the last response.

The file includes detailed comments explaining the usage and options for each command. It sets up the core functionality of the VimQQ plugin.
</summary>
</file>

<file>
<index>12</index>
<path>autoload/vimqq/path.vim</path>
<summary>
This file defines two functions for handling file paths in the VimQQ plugin:
1. vimqq#path#log: Returns the path for log files, supporting both Vim and Neovim.
2. vimqq#path#data: Returns the path for data files, supporting both Vim and Neovim.

These functions ensure that the plugin uses the appropriate directories for storing logs and data files across different Vim variants.
</summary>
</file>

<file>
<index>13</index>
<path>autoload/vimqq/chatsdb.vim</path>
<summary>
This file implements a chat database module for the VimQQ plugin. It provides functions for managing chat history, including:
- Creating new chats
- Appending messages to chats
- Managing partial messages
- Retrieving chat information
- Saving and loading chat data from a JSON file

The module handles chat IDs, sequencing, titles, and maintains the overall structure of the chat history. It's a crucial component for persisting and managing chat data in the plugin.
</summary>
</file>

<file>
<index>14</index>
<path>autoload/vimqq/prompts.vim</path>
<summary>
This file defines two prompts used in the VimQQ plugin:
1. A chained prompt for generating step-by-step reasoning responses.
2. A repository indexing prompt for describing the contents of a code repository.

The chained prompt is configurable and encourages the AI to provide detailed, multi-step reasoning. The repo indexing prompt is used to generate a comprehensive description of a code repository's structure and contents.
</summary>
</file>

<file>
<index>15</index>
<path>autoload/vimqq/main.vim</path>
<summary>
This is the main module of the VimQQ plugin, containing core functionality and serving as the central hub for various plugin operations. Key features include:
- Initialization of UI, chat database, and bot managers
- Handling of user commands (sending messages, managing chats, etc.)
- Coordination between different plugin components
- Implementation of chat operations (new chats, deleting chats, etc.)
- Management of the plugin's state and query queue
- Integration of different context modes for queries

It orchestrates the overall functionality of the plugin, connecting user interactions with the underlying chat and AI systems.
</summary>
</file>

<file>
<index>16</index>
<path>autoload/vimqq/fmt.vim</path>
<summary>
This file contains functions for formatting messages in the VimQQ plugin. It includes:
- Template definitions for different message formats
- A function to format individual messages based on their content and context
- Functions to apply formatting to single messages or lists of messages

The formatting functions handle the inclusion of code snippets, selections, and additional context in the messages sent to AI models.
</summary>
</file>

<file>
<index>17</index>
<path>autoload/vimqq/autowarm.vim</path>
<summary>
This module implements an auto-warming feature for the VimQQ plugin. It includes:
- Functions to start and stop auto-warming
- A timer-based loop to check and update the current command
- Logic to send warmup queries to maintain model readiness
- Configuration options for warmup behavior

The auto-warm functionality aims to reduce latency by keeping the AI model "warm" with periodic queries during user idle time.
</summary>
</file>

<file>
<index>18</index>
<path>autoload/vimqq/ui.vim</path>
<summary>
This file implements the user interface components of the VimQQ plugin. It includes functions for:
- Displaying chat history and individual chats
- Managing the chat window (opening, closing, toggling)
- Updating the status line with bot information
- Handling user interactions in the chat window
- Rendering messages with proper formatting and syntax highlighting

The UI module is responsible for presenting chat data to the user and managing the visual aspects of the plugin within Vim.
</summary>
</file>

<file>
<index>19</index>
<path>autoload/vimqq/log.vim</path>
<summary>
This file implements a logging system for the VimQQ plugin. It provides functions for:
- Logging messages at different levels (DEBUG, INFO, ERROR)
- Configuring log file location and format
- Setting the global log level

The logging system helps with debugging and monitoring the plugin's operation by writing messages to a designated log file.
</summary>
</file>

<file>
<index>20</index>
<path>autoload/vimqq/jobs.vim</path>
<summary>
This module provides job management functionality for the VimQQ plugin, supporting both Vim and Neovim. It includes:
- Functions to start jobs (commands) asynchronously
- Handling of job output and callbacks
- Adaptation layer to unify job handling between Vim and Neovim
- Management of active jobs and cleanup of completed jobs

This module is crucial for running external commands and handling their output without blocking the editor.
</summary>
</file>

<file>
<index>21</index>
<path>autoload/vimqq/metrics.vim</path>
<summary>
This file implements a simple metrics tracking system for the VimQQ plugin. It provides functions to:
- Increment named metrics
- Retrieve metric values
- Save metrics to a JSON file periodically and on Vim exit

The metrics system helps in monitoring and analyzing the usage and performance of the plugin over time.
</summary>
</file>

<file>
<index>22</index>
<path>autoload/vimqq/base.vim</path>
<summary>
This file defines a base object with callback management functionality for the VimQQ plugin. It includes:
- A function to create a new base object
- Methods to set and call callbacks

This base object is likely used as a foundation for other modules in the plugin that require callback functionality.
</summary>
</file>

<file>
<index>23</index>
<path>autoload/vimqq/state.vim</path>
<summary>
This module manages the state of the VimQQ plugin. It handles:
- Chat ID management
- Query queuing and execution
- Latency tracking for queries
- Management of partial responses and completion status

The state module plays a crucial role in coordinating the flow of queries and responses within the plugin.
</summary>
</file>

<file>
<index>24</index>
<path>autoload/vimqq/bots/claude.vim</path>
<summary>
This file implements integration with the Claude AI model (by Anthropic) for the VimQQ plugin. It includes:
- Configuration for the Claude API
- Functions to send queries and process responses
- Handling of streaming responses
- Generation of chat titles
- Usage tracking and reporting

The module allows the plugin to interact with Claude, enabling AI-powered chat functionality.
</summary>
</file>

<file>
<index>25</index>
<path>autoload/vimqq/bots/groq.vim</path>
<summary>
This file implements integration with the Groq AI platform for the VimQQ plugin. It includes:
- Configuration for the Groq API
- Functions to send queries and process responses
- Handling of non-streaming responses
- Generation of chat titles
- Usage tracking and reporting

The module enables the plugin to interact with Groq's AI models, providing another option for AI-powered chat functionality.
</summary>
</file>

<file>
<index>26</index>
<path>autoload/vimqq/bots/bots.vim</path>
<summary>
This file manages the collection of AI bots available in the VimQQ plugin. It includes:
- Configuration for different bot types (Llama, Claude, Groq, Mistral)
- Validation of bot names and configurations
- Creation of bot instances based on configuration
- Selection of appropriate bot for user queries

This module serves as a central point for managing and accessing different AI models within the plugin.
</summary>
</file>

<file>
<index>27</index>
<path>autoload/vimqq/bots/mistral.vim</path>
<summary>
This file implements integration with the Mistral AI platform for the VimQQ plugin. It includes:
- Configuration for the Mistral API
- Functions to send queries and process responses
- Handling of non-streaming responses
- Generation of chat titles
- Usage tracking and reporting

The module allows the plugin to interact with Mistral's AI models, providing another option for AI-powered chat functionality.
</summary>
</file>

<file>
<index>28</index>
<path>autoload/vimqq/bots/llama.vim</path>
<summary>
This file implements integration with the Llama AI model for the VimQQ plugin. It includes:
- Configuration for the Llama API
- Functions to send queries and process streaming responses
- Handling of warmup queries to pre-fill the cache
- Generation of chat titles
- Health checking of the Llama server

The module enables the plugin to interact with Llama-based AI models, with a focus on low-latency responses through warmup functionality.
</summary>
</file>

<file>
<index>29</index>
<path>autoload/vimqq/context/blame.vim</path>
<summary>
This file implements a Git blame context provider for the VimQQ plugin. It includes functions to:
- Run Git blame on a selected range of lines
- Retrieve commit information for the blamed lines
- Format the blame information as context for AI queries

This module enhances the context provided to AI models with relevant Git history information.
</summary>
</file>

<file>
<index>30</index>
<path>autoload/vimqq/context/github.vim</path>
<summary>
This file implements GitHub-related context gathering for the VimQQ plugin. It includes functions to:
- Determine the GitHub repository for the current project
- Fetch related issues and pull requests based on Git blame information
- Process and format GitHub API responses

This module enriches the context provided to AI models with relevant GitHub issues and pull requests.
</summary>
</file>

<file>
<index>31</index>
<path>autoload/vimqq/context/ctags.vim</path>
<summary>
This file implements ctags-based context gathering for the VimQQ plugin. It includes functions to:
- Search for tag definitions based on words in the current selection
- Retrieve file contents for matched tags
- Format the gathered information as context for AI queries

This module enhances the context provided to AI models with relevant code definitions and usage information.
</summary>
</file>

<file>
<index>32</index>
<path>autoload/vimqq/context/context.vim</path>
<summary>
This is the main context management file for the VimQQ plugin. It includes functions to:
- Retrieve the current file content
- Get the current visual selection
- Combine different types of context (file, selection, ctags, project, blame)
- Apply the appropriate context gathering methods based on user-specified modes

This module coordinates the collection and formatting of various types of context to enhance AI queries.
</summary>
</file>

<file>
<index>33</index>
<path>autoload/vimqq/context/project.vim</path>
<summary>
This file implements project-wide context gathering for the VimQQ plugin. It includes functions to:
- Recursively list files in a project directory matching specified patterns
- Read and combine the contents of multiple files
- Find the root directory of the current project (based on Git repository)
- Generate a comprehensive context including multiple files from the project

This module provides a way to include broader project context in AI queries, potentially improving the relevance of AI responses for project-wide tasks.
</summary>
</file>
