{
    "files": {
        "autoload/vimqq/base.vim": {
            "path": "autoload/vimqq/base.vim",
            "size": 846,
            "checksum": "ba4b0845748e2deb2c638860c653a3b9",
            "processing_timestamp": "2024-12-07T23:07:21.412860",
            "approx_tokens": 220,
            "processing_result": "This file defines the base object for the vimqq plugin, which provides callback management functionality. The `vimqq#base#new` function creates a new base object, and the `set_cb` and `call_cb` functions allow setting and calling callback functions, respectively. This file serves as a foundation for other vimqq modules, providing a standardized way to manage callbacks and handle events."
        },
        "autoload/vimqq/bots/bots.vim": {
            "path": "autoload/vimqq/bots/bots.vim",
            "size": 3126,
            "checksum": "d03439cc7ccc012780cd699570f8651e",
            "processing_timestamp": "2024-12-07T23:07:21.412860",
            "approx_tokens": 880,
            "processing_result": "This file contains the bot management functionality for the vimqq plugin. It defines the `vimqq#bots#bots#new` function, which creates a new bot manager instance. The bot manager is responsible for creating and managing a list of bot instances, which are configured using the `g:vqq_llama_servers`, `g:vqq_claude_models`, `g:vqq_groq_models`, and `g:vqq_mistral_models` variables. The `select` function is used to select a bot based on the user's input, and the `bots` function returns the list of bot instances."
        },
        "autoload/vimqq/bots/claude.vim": {
            "path": "autoload/vimqq/bots/claude.vim",
            "size": 5783,
            "checksum": "782754005cae098d56bbaa4a29ad167a",
            "processing_timestamp": "2024-12-07T23:07:21.412860",
            "approx_tokens": 1622,
            "processing_result": "This file defines the Claude bot module for the vimqq plugin. The `vimqq#bots#claude#new` function creates a new Claude bot instance, which is configured using a dictionary of options. The Claude bot provides several functions, including `name`, `do_autowarm`, `send_warmup`, `send_chat`, and `send_gen_title`, which are used to interact with the Claude API. The bot also defines several private functions, including `_update_usage`, `_on_title_out`, `_on_title_close`, `_on_out`, `_on_err`, and `_on_close`, which handle the response from the Claude API and update the bot's state accordingly."
        },
        "autoload/vimqq/bots/groq.vim": {
            "path": "autoload/vimqq/bots/groq.vim",
            "size": 6090,
            "checksum": "45fdd101949eda3aba52fb3f7fb6b9c2",
            "processing_timestamp": "2024-12-07T23:08:42.277814",
            "approx_tokens": 1717,
            "processing_result": "This is a Vim script file that implements a Groq bot for the VimQQ plugin. The bot is designed to interact with the Groq API to generate human-like text responses. The script defines a function `vimqq#bots#groq#new` that creates a new Groq bot instance, which has several methods for sending queries to the Groq API, processing responses, and updating usage statistics. The bot also has a configuration object that can be customized with various settings, such as API key, title tokens, and max tokens. The script uses Vim's built-in `json_encode` and `json_decode` functions to work with JSON data."
        },
        "autoload/vimqq/bots/llama.vim": {
            "path": "autoload/vimqq/bots/llama.vim",
            "size": 6253,
            "checksum": "fd3be46d273165808f857eefcfc54762",
            "processing_timestamp": "2024-12-07T23:08:42.277814",
            "approx_tokens": 1730,
            "processing_result": "This is a Vim script file that implements a Llama bot for the VimQQ plugin. The bot is designed to interact with a Llama server to generate human-like text responses. The script defines a function `vimqq#bots#llama#new` that creates a new Llama bot instance, which has several methods for sending queries to the Llama server, processing responses, and updating status information. The bot also has a configuration object that can be customized with various settings, such as server address, title tokens, and max tokens. The script uses Vim's built-in `json_encode` and `json_decode` functions to work with JSON data. The Llama bot also has a healthcheck mechanism that periodically checks the status of the Llama server."
        },
        "autoload/vimqq/bots/mistral.vim": {
            "path": "autoload/vimqq/bots/mistral.vim",
            "size": 6584,
            "checksum": "f55cdc7dfd604cf744215cb8c1689ddf",
            "processing_timestamp": "2024-12-07T23:10:23.711016",
            "approx_tokens": 1808,
            "processing_result": "This is a Vim script file that defines a Mistral bot for the VimQQ plugin. The bot uses the Mistral API to generate text based on user input. The script sets up the bot's configuration, including the API key, and defines several functions for interacting with the API, such as sending queries and processing responses. The bot also keeps track of usage metrics and logs errors. The script is written in Vimscript and uses Vim's built-in data structures and functions to manage the bot's state."
        },
        "autoload/vimqq/bots/readme.txt": {
            "path": "autoload/vimqq/bots/readme.txt",
            "size": 180,
            "checksum": "dce1d38dfd48164553828527fedcf9b7",
            "processing_timestamp": "2024-12-07T23:10:23.711016",
            "approx_tokens": 35,
            "processing_result": "This is a README file for the VimQQ bots directory. It contains a brief note from the author stating that some of the bot implementations are similar, but they are kept separate due to slight differences. The author plans to refactor and clean up the code once all bots are added."
        },
        "autoload/vimqq/context/blame.vim": {
            "path": "autoload/vimqq/context/blame.vim",
            "size": 1414,
            "checksum": "37c95679f1ed7a849f427fa34169824a",
            "processing_timestamp": "2024-12-07T23:10:23.711016",
            "approx_tokens": 421,
            "processing_result": "This is a Vim script file that defines a context blame function for the VimQQ plugin. The function uses Git to retrieve the commit history for a selected range of lines in a file, and it then displays the relevant commits and their corresponding lines. The script uses Vim's built-in functions to interact with Git and to display the results. The function is designed to provide context for the user's current selection, showing the commits that modified the selected lines."
        },
        "autoload/vimqq/context/context.vim": {
            "path": "autoload/vimqq/context/context.vim",
            "size": 1574,
            "checksum": "47e13127a77d3c324c3a2efb354174fb",
            "processing_timestamp": "2024-12-07T23:12:21.615532",
            "approx_tokens": 452,
            "processing_result": "This file contains the main context module for Vimqq. It provides functions for filling in context information for a given message, including visual selection, file content, ctags, project, and blame. The `vimqq#context#context#fill` function takes a message object and a dictionary of context modes as input and returns the filled-in message. The file also defines several internal functions for getting the visual selection, file content, and ctags information."
        },
        "autoload/vimqq/context/ctags.vim": {
            "path": "autoload/vimqq/context/ctags.vim",
            "size": 2740,
            "checksum": "41eac10578fc3dabe3751a89dddcae44",
            "processing_timestamp": "2024-12-07T23:12:21.615532",
            "approx_tokens": 806,
            "processing_result": "This file contains the ctags module for Vimqq. It provides functions for getting relevant context information from ctags, including the `vimqq#context#ctags#run` function which takes a selection as input and returns a string containing the relevant context information. The file also defines several internal functions for escaping search patterns, getting the relevant context, and running the ctags command."
        },
        "autoload/vimqq/context/github.vim": {
            "path": "autoload/vimqq/context/github.vim",
            "size": 3440,
            "checksum": "45b6c927cc4365a3baf88eb1802720e2",
            "processing_timestamp": "2024-12-07T23:12:21.615532",
            "approx_tokens": 1014,
            "processing_result": "This file contains the GitHub module for Vimqq. It provides functions for getting context information from GitHub, including the `vimqq#context#github#run` function which takes no input and returns a string containing the relevant context information. The file also defines several internal functions for parsing the Git remote URL, guessing the GitHub repository, calling the GitHub API, processing GitHub items, and running the Git blame command."
        },
        "autoload/vimqq/context/project.vim": {
            "path": "autoload/vimqq/context/project.vim",
            "size": 2163,
            "checksum": "165aa42d167e320f2cf4161888769865",
            "processing_timestamp": "2024-12-07T23:12:21.615532",
            "approx_tokens": 621,
            "processing_result": "This file contains the project module for Vimqq. It provides functions for getting context information from the project, including the `vimqq#context#project#run` function which takes an optional pattern as input and returns a string containing the relevant context information. The file also defines several internal functions for listing files, combining files, and finding the project root."
        },
        "autoload/vimqq/fmt.vim": {
            "path": "autoload/vimqq/fmt.vim",
            "size": 2736,
            "checksum": "be534b86d0548de21e715cbb85b8f76a",
            "processing_timestamp": "2024-12-07T23:12:21.615532",
            "approx_tokens": 747,
            "processing_result": "This file contains the formatting module for Vimqq. It provides functions for formatting messages, including the `vimqq#fmt#content` function which takes a message object and an optional folding context as input and returns the formatted content. The file also defines several internal functions for replacing placeholders, picking the widest context, and formatting the content. The `vimqq#fmt#one` and `vimqq#fmt#many` functions provide a way to format a single message or a list of messages, respectively."
        },
        "autoload/vimqq/metrics.vim": {
            "path": "autoload/vimqq/metrics.vim",
            "size": 789,
            "checksum": "098fde421558b13c18d2c70666519f84",
            "processing_timestamp": "2024-12-07T23:16:10.515891",
            "approx_tokens": 239,
            "processing_result": "This file contains a Vim script that provides a metrics system for the VimQQ plugin. It allows for incrementing and retrieving metrics, as well as saving them to a JSON file. The metrics are stored in a dictionary and can be incremented using the `vimqq#metrics#inc` function. The `vimqq#metrics#get` function retrieves the current value of a metric. The `vimqq#metrics#save` function saves the metrics to a JSON file. The file also sets up an autocommand to save the metrics when Vim exits and a timer to save the metrics at regular intervals."
        },
        "autoload/vimqq/path.vim": {
            "path": "autoload/vimqq/path.vim",
            "size": 490,
            "checksum": "5792e8a49d3d8f50f7211346aad98ba2",
            "processing_timestamp": "2024-12-07T23:16:10.515891",
            "approx_tokens": 148,
            "processing_result": "This file contains a Vim script that provides functions for working with file paths in the VimQQ plugin. It defines two functions: `vimqq#path#log` and `vimqq#path#data`. Both functions return the path to a file in the Vim data directory, with the difference being that `vimqq#path#log` is used for log files and `vimqq#path#data` is used for data files. The functions take into account whether the user is running Neovim or Vim."
        },
        "autoload/vimqq/prompts.vim": {
            "path": "autoload/vimqq/prompts.vim",
            "size": 2569,
            "checksum": "4b70fb43a1accffc2031a46f06a7671b",
            "processing_timestamp": "2024-12-07T23:16:10.515891",
            "approx_tokens": 605,
            "processing_result": "This file contains a Vim script that provides functions for generating prompts for the VimQQ plugin. It defines two functions: `vimqq#prompts#chained` and `vimqq#prompts#index`. The `vimqq#prompts#chained` function generates a prompt for a chained query, which is a query that requires multiple steps to complete. The `vimqq#prompts#index` function generates a prompt for indexing a code repository."
        },
        "doc/vimqq.txt": {
            "path": "doc/vimqq.txt",
            "size": 17238,
            "checksum": "d35cacef18fd16eb14bcade5c67c4464",
            "processing_timestamp": "2024-12-07T23:17:06.736171",
            "approx_tokens": 4192,
            "processing_result": "This is the documentation file for the Vim plugin \"vimqq\". It provides an introduction to the plugin, its features, and usage. The plugin is designed to interact with AI models, allowing users to ask questions and receive responses within the Vim editor. The documentation covers installation, configuration, and usage of the plugin, including commands, mappings, and options. It also provides information on the supported AI models, such as Groq, Claude, and local llama.cpp servers. The file includes a changelog section, which lists the changes and updates made to the plugin."
        },
        "tests/data/chat_list_one.json": {
            "path": "tests/data/chat_list_one.json",
            "size": 87,
            "checksum": "ef5a0f5a43ef78dd448db105a1a05d8e",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 33,
            "processing_result": "This file contains a JSON object that represents a chat list with two chat queries, one stream query, three deltas, and one non-stream query."
        },
        "tests/data/chat_list_one.vim": {
            "path": "tests/data/chat_list_one.vim",
            "size": 469,
            "checksum": "632309e6952d3ebf7efa6365dfae482b",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 156,
            "processing_result": "This file is a Vim script that tests the `:QQ` command with the `-s` option, which uses visual selection as context. The script sources a library file `libtest.vim` and defines a function `WriteAndQuit` that checks the output of the `:QQ` command against an expected output file `chat_list_one.out`."
        },
        "tests/data/new_chat.json": {
            "path": "tests/data/new_chat.json",
            "size": 88,
            "checksum": "9159dda64bcc6e82774c4ac2bce52201",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 33,
            "processing_result": "This file contains a JSON object that represents a new chat with four chat queries, two stream queries, six deltas, and two non-stream queries."
        },
        "tests/data/new_chat.vim": {
            "path": "tests/data/new_chat.vim",
            "size": 491,
            "checksum": "c08a6fcb4f48d2b4bd72c24a386db5ed",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 156,
            "processing_result": "This file is a Vim script that tests the `:Q` command with the `-n` option, which creates a new chat. The script sources a library file `libtest.vim` and defines two functions: `WriteAndQuit` that checks the output of the `:Q` command against an expected output file `new_chat.out`, and `AskNew` that sends a new query to the AI model."
        },
        "tests/data/new_chat_nodelay.json": {
            "path": "tests/data/new_chat_nodelay.json",
            "size": 87,
            "checksum": "ccad152c7067e5e1813e24f14a717216",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 33,
            "processing_result": "This file contains a JSON object that represents a new chat with four chat queries, two stream queries, six deltas, and two non-stream queries, similar to `new_chat.json`."
        },
        "tests/data/new_chat_nodelay.vim": {
            "path": "tests/data/new_chat_nodelay.vim",
            "size": 427,
            "checksum": "360dcf445bc80e1804916e5289fde38e",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 138,
            "processing_result": "This file is a Vim script that tests the `:Q` command without delay. The script sources a library file `libtest.vim` and defines a function `WriteAndQuit` that checks the output of the `:Q` command against an expected output file `new_chat_nodelay.out`."
        },
        "tests/data/query.json": {
            "path": "tests/data/query.json",
            "size": 87,
            "checksum": "ef5a0f5a43ef78dd448db105a1a05d8e",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 33,
            "processing_result": "This file contains a JSON object that represents a query with two chat queries, one stream query, three deltas, and one non-stream query."
        },
        "tests/data/query.vim": {
            "path": "tests/data/query.vim",
            "size": 381,
            "checksum": "030f64dcb53251f8ec994575e5c8e4b2",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 121,
            "processing_result": "This file is a Vim script that tests the `:Q` command. The script sources a library file `libtest.vim` and defines a function `WriteAndQuit` that checks the output of the `:Q` command against an expected output file `query.out`."
        },
        "tests/data/query_twice.json": {
            "path": "tests/data/query_twice.json",
            "size": 87,
            "checksum": "db449682ae424eb36654d9c5e2c53adb",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 33,
            "processing_result": "This file contains a JSON object that represents a query with three chat queries, two stream queries, six deltas, and one non-stream query."
        },
        "tests/data/query_twice.vim": {
            "path": "tests/data/query_twice.vim",
            "size": 477,
            "checksum": "d17e53604c34f1b93685d933d00f3f58",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 150,
            "processing_result": "This file is a Vim script that tests the `:Q` command twice. The script sources a library file `libtest.vim` and defines two functions: `WriteAndQuit` that checks the output of the `:Q` command against an expected output file `query_twice.out`, and `AskNew` that sends a new query to the AI model."
        },
        "tests/data/queue.json": {
            "path": "tests/data/queue.json",
            "size": 87,
            "checksum": "db449682ae424eb36654d9c5e2c53adb",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 33,
            "processing_result": "This file contains a JSON object that represents a queue with three chat queries, two stream queries, six deltas, and one non-stream query."
        },
        "tests/data/queue.vim": {
            "path": "tests/data/queue.vim",
            "size": 398,
            "checksum": "c94b628c37e2353d5743b530119958ae",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 127,
            "processing_result": "This file is a Vim script that tests the `:Q` command with a queue. The script sources a library file `libtest.vim` and defines a function `WriteAndQuit` that checks the output of the `:Q` command against an expected output file `queue.out`."
        },
        "tests/data/selection.json": {
            "path": "tests/data/selection.json",
            "size": 87,
            "checksum": "ef5a0f5a43ef78dd448db105a1a05d8e",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 33,
            "processing_result": "This file contains a JSON object that represents a selection with two chat queries, one stream query, three deltas, and one non-stream query."
        },
        "tests/data/selection.vim": {
            "path": "tests/data/selection.vim",
            "size": 451,
            "checksum": "c6150495c28d39005c52490887e4f65a",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 149,
            "processing_result": "This file is a Vim script that tests the `:QQ` command with the `-s` option, which uses visual selection as context. The script sources a library file `libtest.vim` and defines a function `WriteAndQuit` that checks the output of the `:QQ` command against an expected output file `selection.out`."
        },
        "tests/data/warmup.json": {
            "path": "tests/data/warmup.json",
            "size": 103,
            "checksum": "afa63f15c0db4693ef942f1b24e881bb",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 42,
            "processing_result": "This file contains a JSON object that represents a warmup with three chat queries, one stream query, three deltas, one non-stream query, and one warmup."
        },
        "tests/data/warmup.vim": {
            "path": "tests/data/warmup.vim",
            "size": 399,
            "checksum": "61a2b814e2d5c1bd4faef4fd205a65c5",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 129,
            "processing_result": "This file is a Vim script that tests the `:Q` command with warmup. The script sources a library file `libtest.vim` and defines a function `WriteAndQuit` that checks the output of the `:Q` command against an expected output file `query.out`."
        },
        "tests/data/warmup_open.json": {
            "path": "tests/data/warmup_open.json",
            "size": 104,
            "checksum": "a0f749c197c94a4fbc4d5ada243f1cca",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 42,
            "processing_result": "This file contains a JSON object that represents a warmup with three chat queries, one stream query, three deltas, one non-stream query, and one warmup, similar to `warmup.json`."
        },
        "tests/data/warmup_open.vim": {
            "path": "tests/data/warmup_open.vim",
            "size": 433,
            "checksum": "96cc3a3134a8fa9b833f16bfc8960395",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 140,
            "processing_result": "This file is a Vim script that tests the `:Q` command with warmup and auto-warmup enabled. The script sources a library file `libtest.vim` and defines a function `WriteAndQuit` that checks the output of the `:Q` command against an expected output file `query.out`."
        },
        "tests/libtest.vim": {
            "path": "tests/libtest.vim",
            "size": 488,
            "checksum": "c1d8cd67de9adf29710337476dc36de3",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 150,
            "processing_result": "This file is a Vim library that provides a function `VQQCompareChats` to compare two lists of chat messages. The function checks if the two lists have the same length and if each message in the first list matches the corresponding message in the second list, ignoring timestamps."
        },
        "tests/readme.txt": {
            "path": "tests/readme.txt",
            "size": 1006,
            "checksum": "ff1b9c202937b671491ccccae8a687d1",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 257,
            "processing_result": "This file is a README file that describes how to run the tests, the requirements for the tests, and the configuration options. It also lists some ideas for future tests and improvements."
        },
        "todo.txt": {
            "path": "todo.txt",
            "size": 466,
            "checksum": "97cf44df90f91e3651124b8e3b56525c",
            "processing_timestamp": "2024-12-07T23:21:57.055395",
            "approx_tokens": 117,
            "processing_result": "This file is a TODO list that contains ideas for future features and improvements, such as supporting other AI providers, streaming for remote APIs, caching, context generalization, and testing on Windows."
        },
        "autoload/vimqq/autowarm.vim": {
            "path": "autoload/vimqq/autowarm.vim",
            "size": 2786,
            "checksum": "364ec2ecf6296d7fa1370b79d4cf8cba",
            "processing_timestamp": "2024-12-12T22:47:20.206373",
            "approx_tokens": 850,
            "processing_result": "This Vim script file is responsible for implementing an autowarm feature for a Vim plugin called vimqq. The autowarm feature is designed to send warmup queries to a bot at regular intervals to keep it active and responsive. The script defines several functions to manage the autowarm process, including starting and stopping the autowarm, sending warmup queries, and handling timer events. It also uses variables to store the autowarm state, messages, and bot information. The script relies on other Vim functions and variables, such as vimqq#log#debug, to perform logging and debugging tasks."
        },
        "autoload/vimqq/chatsdb.vim": {
            "path": "autoload/vimqq/chatsdb.vim",
            "size": 5150,
            "checksum": "de13a1db980c626dff93cd00826e2e61",
            "processing_timestamp": "2024-12-12T22:47:20.206373",
            "approx_tokens": 1429,
            "processing_result": "This Vim script file provides a database module for storing and managing chat history for the vimqq plugin. The module defines a function to create a new chat database object, which includes methods for saving and loading chat data, appending partial messages, deleting chats, and getting chat titles and messages. The database uses a JSON file to store chat data, and it includes functionality for auto-incrementing sequence IDs and computing chat titles. The script also defines several variables to store chat data and configuration settings, such as the file path for the chat database and the sequence ID."
        },
        "autoload/vimqq/jobs.vim": {
            "path": "autoload/vimqq/jobs.vim",
            "size": 2358,
            "checksum": "68492a74a5a1f4288bf332d84db8bcfc",
            "processing_timestamp": "2024-12-12T22:47:20.206373",
            "approx_tokens": 728,
            "processing_result": "This Vim script file provides a module for managing jobs (background processes) in the vimqq plugin. The module defines functions to start jobs using either Vim's job_start function or Neovim's jobstart function, depending on the version of Vim being used. It also includes functions to keep track of active jobs and clean up dead jobs. The script defines variables to store configuration settings, such as the number of jobs to keep track of, and it uses other Vim functions, such as job_info, to get information about jobs."
        },
        "autoload/vimqq/log.vim": {
            "path": "autoload/vimqq/log.vim",
            "size": 1204,
            "checksum": "9094ba0defca8832251f191ef113c59c",
            "processing_timestamp": "2024-12-12T22:47:20.206373",
            "approx_tokens": 365,
            "processing_result": "This Vim script file provides a logging module for the vimqq plugin. The module defines functions to log messages at different levels (DEBUG, INFO, WARNING, ERROR) and to configure logging settings, such as the log file path and log level. The script uses variables to store logging configuration settings and defines a function to implement logging, which checks the log level and writes messages to the log file if the level is sufficient. The script also includes functions to display error and warning messages in the Vim interface."
        },
        "autoload/vimqq/main.vim": {
            "path": "autoload/vimqq/main.vim",
            "size": 10277,
            "checksum": "76ace66cc14b50e1de2f0cd597cc29e0",
            "processing_timestamp": "2024-12-12T22:48:33.747511",
            "approx_tokens": 2934,
            "processing_result": "This file contains the main logic of the vimqq plugin. It sets up the wiring between different modules, defines callback functions, and implements the internal API. The main functionality includes sending messages, warmup queries, and handling replies from the server. It also defines public commands such as vimqq#main#qq, vimqq#main#q, and vimqq#main#fork_chat. The file uses various other modules, including vimqq#ui, vimqq#chatsdb, vimqq#bots, and vimqq#state."
        },
        "autoload/vimqq/state.vim": {
            "path": "autoload/vimqq/state.vim",
            "size": 4182,
            "checksum": "cdb799254d4caaf628d45cee530cf5de",
            "processing_timestamp": "2024-12-12T22:48:33.747511",
            "approx_tokens": 1095,
            "processing_result": "This file implements the state management for the vimqq plugin. It defines a vimqq#state#new function that creates a new state object, which manages the current chat ID, queues, and latencies. The state object provides methods for getting and setting the current chat ID, picking a chat ID, enqueueing queries, and tracking latencies. It is used by the main logic in autoload/vimqq/main.vim to manage the state of the plugin."
        },
        "autoload/vimqq/ui.vim": {
            "path": "autoload/vimqq/ui.vim",
            "size": 9188,
            "checksum": "e5f10e3a9ea3e924fbe03aa6026ba737",
            "processing_timestamp": "2024-12-12T22:49:40.095364",
            "approx_tokens": 2285,
            "processing_result": "This file is part of the Vim plugin for AI chat and contains the user interface functionality. It provides functions for creating and managing chat windows, displaying chat history, and handling user input. The file defines a Vimqq UI module that can be used to interact with the chat system. It includes functions for opening chat windows, appending messages, updating the status line, and displaying chat history. The file also sets up a basic color scheme for the chat windows using Vim's syntax highlighting."
        },
        "plugin/vimqq.vim": {
            "path": "plugin/vimqq.vim",
            "size": 1886,
            "checksum": "c1e28e4e6e48bd507a0ecd6abb9465b9",
            "processing_timestamp": "2024-12-12T22:49:40.095364",
            "approx_tokens": 551,
            "processing_result": "This file is the main plugin file for the Vim AI chat plugin. It defines several commands that can be used to interact with the chat system, including QQ, Q, QF, QQList, QQOpenChat, QQChat, and QE. The QQ command is used to send a message to a chat bot, while the Q command is used to send a message without warmup. The QF command is used to fork the current chat and start a new discussion thread. The QQList, QQOpenChat, and QQChat commands are used to manage chat windows, and the QE command is used to record subjective evaluations of chat responses. The file also provides documentation for the plugin and its usage."
        }
    },
    "dirs": {
        "autoload/vimqq/bots": {
            "processing_result": "This directory contains the bot management functionality for the vimqq plugin. It includes a bot manager defined in the `bots.vim` file, which creates and manages a list of bot instances configured using various global variables. The bot manager provides functions to select a bot based on user input and return the list of bot instances. \n\nThe directory also includes individual bot modules for Claude, Groq, Llama, and Mistral, each defined in their respective files (`claude.vim`, `groq.vim`, `llama.vim`, and `mistral.vim`). These modules provide functions to interact with their respective APIs, process responses, and update usage statistics. Each bot has a configuration object that can be customized with various settings.\n\nA README file (`readme.txt`) is included, noting that some bot implementations are similar but kept separate due to slight differences, with plans for future refactoring and cleanup.\n\nThe relationships between files are as follows: the `bots.vim` file manages instances of the bots defined in `claude.vim`, `groq.vim`, `llama.vim`, and `mistral.vim`. The `readme.txt` file provides context and plans for the directory's contents. Overall, this directory provides a framework for integrating multiple bots with the vimqq plugin, allowing for diverse text generation capabilities based on different APIs and configurations.",
            "checksum": "68248c62564e69a36bbc5ab39f64645c"
        },
        "autoload/vimqq/context": {
            "processing_result": "This directory contains the context modules for the VimQQ plugin, providing functions for gathering and displaying context information for a given message or selection. The directory includes several files, each representing a different module: blame.vim, context.vim, ctags.vim, github.vim, and project.vim. \n\nThe blame.vim file defines a function for retrieving commit history for a selected range of lines in a file using Git. The context.vim file serves as the main context module, providing a function for filling in context information for a message, including visual selection, file content, ctags, project, and blame. \n\nThe ctags.vim file contains functions for getting relevant context information from ctags, while the github.vim file provides functions for getting context information from GitHub, including parsing the Git remote URL, guessing the GitHub repository, and calling the GitHub API. \n\nThe project.vim file contains functions for getting context information from the project, including listing files, combining files, and finding the project root. \n\nThese modules work together to provide a comprehensive set of context information for the user's current selection, enhancing the overall functionality of the VimQQ plugin. The relationships between these files are established through the VimQQ plugin's architecture, where each module contributes to the plugin's ability to gather and display context information.",
            "checksum": "1877d46e9cc92476e7533d0c3f443c1d"
        },
        "autoload/vimqq": {
            "processing_result": "This directory contains the implementation of the VimQQ plugin, providing a comprehensive set of features for interacting with AI chat models. The plugin is organized into several modules, each responsible for a specific aspect of the plugin's functionality.\n\nThe plugin's core functionality is managed by the `main.vim` file, which sets up the wiring between different modules, defines callback functions, and implements the internal API. The main functionality includes sending messages, warmup queries, and handling replies from the server.\n\nThe plugin includes several modules for managing specific aspects of the chat system, including `chatsdb.vim` for storing and managing chat history, `state.vim` for managing the plugin's state, and `ui.vim` for creating and managing chat windows.\n\nThe plugin also includes modules for interacting with external services, such as `bots.vim` for managing bot instances, `context.vim` for gathering and displaying context information, and `jobs.vim` for managing background processes.\n\nAdditionally, the plugin includes modules for providing utility functions, such as `autowarm.vim` for sending warmup queries, `base.vim` for managing callbacks, `fmt.vim` for formatting messages, `log.vim` for logging, `metrics.vim` for tracking metrics, `path.vim` for working with file paths, and `prompts.vim` for generating prompts.\n\nThe relationships between these modules are complex, with each module contributing to the overall functionality of the plugin. The `main.vim` file relies on the `state.vim` module to manage the plugin's state, while the `ui.vim` module relies on the `chatsdb.vim` module to display chat history. The `bots.vim` module is used by the `main.vim` file to send messages to bot instances, while the `context.vim` module is used to gather and display context information for the user's current selection.\n\nOverall, this directory provides a comprehensive implementation of the VimQQ plugin, with a modular design that allows for easy maintenance and extension of the plugin's functionality.",
            "checksum": "9b2b2ee4763b7a36f1ab759ad2cd2fb2"
        },
        "autoload": {
            "processing_result": "This directory contains the implementation of the VimQQ plugin, providing a comprehensive set of features for interacting with AI chat models. The plugin is organized into several modules, each responsible for a specific aspect of the plugin's functionality.\n\nThe plugin's core functionality is managed by the `main.vim` file, which sets up the wiring between different modules, defines callback functions, and implements the internal API. The main functionality includes sending messages, warmup queries, and handling replies from the server.\n\nThe plugin includes several modules for managing specific aspects of the chat system, including `chatsdb.vim` for storing and managing chat history, `state.vim` for managing the plugin's state, and `ui.vim` for creating and managing chat windows.\n\nThe plugin also includes modules for interacting with external services, such as `bots.vim` for managing bot instances, `context.vim` for gathering and displaying context information, and `jobs.vim` for managing background processes.\n\nAdditionally, the plugin includes modules for providing utility functions, such as `autowarm.vim` for sending warmup queries, `base.vim` for managing callbacks, `fmt.vim` for formatting messages, `log.vim` for logging, `metrics.vim` for tracking metrics, `path.vim` for working with file paths, and `prompts.vim` for generating prompts.\n\nThe relationships between these modules are complex, with each module contributing to the overall functionality of the plugin. The `main.vim` file relies on the `state.vim` module to manage the plugin's state, while the `ui.vim` module relies on the `chatsdb.vim` module to display chat history. The `bots.vim` module is used by the `main.vim` file to send messages to bot instances, while the `context.vim` module is used to gather and display context information for the user's current selection.\n\nOverall, this directory provides a comprehensive implementation of the VimQQ plugin, with a modular design that allows for easy maintenance and extension of the plugin's functionality.",
            "checksum": "6206eb98b37fb6182c0647094bef9cda"
        },
        "doc": {
            "processing_result": "The \"doc\" directory contains documentation for the project, specifically for the Vim plugin \"vimqq\". The directory includes a single file, \"vimqq.txt\", which provides a comprehensive overview of the plugin, including its features, usage, installation, and configuration. The documentation covers the plugin's interaction with AI models, such as Groq, Claude, and local llama.cpp servers, and includes a changelog section that lists updates and changes made to the plugin. This documentation serves as a central resource for users to understand and effectively utilize the \"vimqq\" plugin within the Vim editor.",
            "checksum": "7bf289308568bd967570c7dbb1deb29c"
        },
        "plugin": {
            "processing_result": "This directory contains the main plugin file for the Vim AI chat plugin, which is vimqq.vim. The vimqq.vim file defines several commands that can be used to interact with the chat system, including QQ, Q, QF, QQList, QQOpenChat, QQChat, and QE. These commands enable users to send messages to a chat bot, manage chat windows, and record subjective evaluations of chat responses. The plugin provides documentation for its usage, making it a self-contained and user-friendly tool for Vim users to engage with AI chat functionality.",
            "checksum": "1c1f09a0c891fb31d0c4c26693745bdc"
        },
        "tests/data": {
            "processing_result": "This directory contains a collection of test data files in JSON format and their corresponding Vim script test files. The JSON files represent various scenarios, including chat lists, new chats, queries, queues, selections, and warmups, each with different combinations of chat queries, stream queries, deltas, and non-stream queries. The Vim script files test the functionality of the `:Q` and `:QQ` commands, often sourcing a library file `libtest.vim` and defining functions to check the output of these commands against expected output files. The tests cover various options and features, such as using visual selection as context, creating new chats, and enabling auto-warmup. The directory provides a comprehensive set of test cases for the AI model and Vim plugin functionality.",
            "checksum": "a6a5c3af658c1baa6ef85bdf03b5184c"
        },
        "tests": {
            "processing_result": "This directory serves as a comprehensive test suite for the AI model and Vim plugin functionality. It contains a collection of test data files in JSON format, along with their corresponding Vim script test files, which are located in the 'data' subdirectory. The test data files represent various scenarios, including chat lists, new chats, queries, queues, selections, and warmups, each with different combinations of chat queries, stream queries, deltas, and non-stream queries. The Vim script files test the functionality of the `:Q` and `:QQ` commands, often sourcing a library file `libtest.vim` and defining functions to check the output of these commands against expected output files. The `libtest.vim` library provides a function `VQQCompareChats` to compare two lists of chat messages, checking if the two lists have the same length and if each message in the first list matches the corresponding message in the second list, ignoring timestamps. A `readme.txt` file is also included, which describes how to run the tests, the requirements for the tests, and the configuration options, as well as listing some ideas for future tests and improvements. The tests cover various options and features, such as using visual selection as context, creating new chats, and enabling auto-warmup, providing a thorough set of test cases for the AI model and Vim plugin functionality.",
            "checksum": "7b848e19dd1fae1c0b8162daf6baa7a5"
        },
        "": {
            "processing_result": "This directory is the root of the VimQQ plugin project, containing a comprehensive set of features for interacting with AI chat models. The project is organized into several directories, each responsible for a specific aspect of the plugin's functionality. The 'autoload' directory contains the implementation of the plugin, including modules for managing chat history, state, UI, and interactions with external services. The 'doc' directory provides documentation for the plugin, covering its features, usage, and configuration. The 'plugin' directory contains the main plugin file, defining commands for interacting with the chat system. The 'tests' directory serves as a comprehensive test suite for the plugin's functionality, including test data and Vim script files. Additionally, a 'todo.txt' file is present, outlining ideas for future features and improvements. The relationships between these directories and files are complex, with each contributing to the overall functionality of the plugin. The 'autoload' directory relies on the 'plugin' directory for commands, while the 'tests' directory relies on the 'autoload' directory for functionality. The 'doc' directory provides documentation for the entire project, and the 'todo.txt' file outlines future development plans. Overall, this directory provides a comprehensive implementation of the VimQQ plugin, with a modular design that allows for easy maintenance and extension of the plugin's functionality.",
            "checksum": "2206c0fa5d8a9fc92beb1f6c61dbae2b"
        }
    }
}