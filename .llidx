{"files": {"autoload/vimqq/autowarm.vim": {"path": "autoload/vimqq/autowarm.vim", "size": 2762, "checksum": "6dd70a41b5658f645a588597232269f6", "processing_timestamp": "2024-10-09T16:02:29.216402", "approx_tokens": 844, "processing_result": "This script provides an autowarm feature for the VimQQ plugin. Autowarm is a mechanism to keep the language model warm by sending regular warmup queries, even when the user is not actively interacting with the plugin. The script sets up a timer to periodically send warmup queries and manages the state of the autowarm feature. It also provides functions to start and stop the autowarm feature.\n\nThe script uses several variables and functions to manage the autowarm state, including:\n\n* `g:vqq_autowarm_cmd_ms`: the interval between warmup queries\n* `g:vqq_autowarm_same_msg`: a flag to determine whether to send warmup queries even if the message hasn't changed\n* `s:autowarm`: the current state of the autowarm feature (on or off)\n* `s:messages`: the list of messages to send as warmup queries\n* `s:bot`: the bot instance associated with the autowarm feature\n* `s:message_updated`: a flag to indicate whether the message has been updated\n* `s:last_warmup_done`: a flag to indicate whether the last warmup query has been sent\n\nThe script provides several functions, including:\n\n* `s:_send_warmup()`: sends the next warmup query\n* `s:_check_cmd()`: checks the current command line to determine whether to send a warmup query\n* `s:_cmd_loop()`: the main loop that checks the command line and sends warmup queries\n* `vimqq#autowarm#start(bot, messages)`: starts the autowarm feature with the given bot and messages\n* `vimqq#autowarm#stop()`: stops the autowarm feature\n* `vimqq#autowarm#next()`: sends the next warmup query and updates the state"}, "autoload/vimqq/base.vim": {"path": "autoload/vimqq/base.vim", "size": 846, "checksum": "ba4b0845748e2deb2c638860c653a3b9", "processing_timestamp": "2024-10-09T16:02:29.216402", "approx_tokens": 220, "processing_result": "This script provides a base class for creating objects with callback management functionality. The script defines a function `vimqq#base#new()` that creates a new base object and sets up its callback management system.\n\nThe script uses several variables and functions to manage the callback system, including:\n\n* `l:base._callbacks`: the dictionary of callbacks associated with the base object\n* `l:base.set_cb(key, fn)`: sets a callback function for a given key\n* `l:base.call_cb(key, ...)`: calls a callback function for a given key with optional arguments\n\nThe script provides a single function `vimqq#base#new()` that creates a new base object and sets up its callback management system."}, "autoload/vimqq/bots/bots.vim": {"path": "autoload/vimqq/bots/bots.vim", "size": 3126, "checksum": "d03439cc7ccc012780cd699570f8651e", "processing_timestamp": "2024-10-09T16:02:29.216402", "approx_tokens": 880, "processing_result": "This script provides a bot manager class that creates and manages a list of bot instances. The script defines several variables and functions to manage the bot instances, including:\n\n* `g:vqq_llama_servers`: a list of Llama server configurations\n* `g:vqq_claude_models`: a list of Claude model configurations\n* `g:vqq_groq_models`: a list of Groq model configurations\n* `g:vqq_mistral_models`: a list of Mistral model configurations\n* `g:vqq_default_bot`: the default bot instance\n\nThe script provides several functions, including:\n\n* `s:_validate_name(name, bots)`: validates a bot name to ensure it is unique and follows naming conventions\n* `s:_create(config_lists)`: creates a list of bot instances from configuration lists\n* `vimqq#bots#bots#new()`: creates a new bot manager instance\n* `l:bots.bots()`: returns the list of bot instances\n* `l:bots.select(question)`: selects a bot instance based on the given question\n\nThe script uses several variables and functions to manage the bot instances, including:\n\n* `l:bots._bots`: the list of bot instances\n* `l:bots._default_bot`: the default bot instance\n* `l:config_lists`: a list of configuration lists for different bot types"}, "autoload/vimqq/bots/claude.vim": {"path": "autoload/vimqq/bots/claude.vim", "size": 5783, "checksum": "782754005cae098d56bbaa4a29ad167a", "processing_timestamp": "2024-10-09T16:02:29.216402", "approx_tokens": 1622, "processing_result": "This script provides a Claude bot class that implements the Claude API. The script defines several variables and functions to manage the Claude bot instance, including:\n\n* `g:vqq_claude_api_key`: the API key for the Claude bot\n* `s:default_conf`: the default configuration for the Claude bot\n* `l:claude._conf`: the configuration for the Claude bot instance\n* `l:claude._api_key`: the API key for the Claude bot instance\n\nThe script provides several functions, including:\n\n* `vimqq#bots#claude#new(config = {})`: creates a new Claude bot instance with the given configuration\n* `l:claude.name()`: returns the name of the Claude bot instance\n* `l:claude.do_autowarm()`: returns a flag indicating whether the Claude bot instance should use autowarm\n* `l:claude.send_warmup(messages)`: sends a warmup query to the Claude bot instance (not implemented)\n* `l:claude.send_chat(chat_id, messages)`: sends a chat query to the Claude bot instance\n* `l:claude.send_gen_title(chat_id, message)`: sends a title generation query to the Claude bot instance\n\nThe script uses several variables and functions to manage the Claude bot instance, including:\n\n* `l:claude._reply_by_id`: the dictionary of replies for the Claude bot instance\n* `l:claude._title_reply_by_id`: the dictionary of title replies for the Claude bot instance\n* `l:claude._usage`: the usage statistics for the Claude bot instance\n* `l:claude._update_usage(usage)`: updates the usage statistics for the Claude bot instance\n* `l:claude._on_title_out(chat_id, msg)`: handles the title output for the Claude bot instance\n* `l:claude._on_out(chat_id, msg)`: handles the output for the Claude bot instance\n* `l:claude._on_err(chat_id, msg)`: handles the error output for the Claude bot instance\n* `l:claude._on_close(chat_id)`: handles the close event for the Claude bot instance\n* `l:claude._send_query(req, job_conf)`: sends a query to the Claude bot instance\n* `l:claude._format_messages(messages)`: formats the messages for the Claude bot instance"}, "autoload/vimqq/bots/groq.vim": {"path": "autoload/vimqq/bots/groq.vim", "size": 6090, "checksum": "45fdd101949eda3aba52fb3f7fb6b9c2", "processing_timestamp": "2024-10-09T16:03:45.874828", "approx_tokens": 1717, "processing_result": "This is a Vim plugin module for interacting with the Groq AI chatbot. It provides functions for sending queries, processing responses, and managing the chat session. The module exports a single function, `vimqq#bots#groq#new()`, which creates a new Groq bot instance. The bot instance has methods for sending queries, processing responses, and updating usage metrics. The module also defines a set of default configuration options for the bot, including API key, title tokens, max tokens, and system prompt."}, "autoload/vimqq/bots/llama.vim": {"path": "autoload/vimqq/bots/llama.vim", "size": 6253, "checksum": "fd3be46d273165808f857eefcfc54762", "processing_timestamp": "2024-10-09T16:03:45.874828", "approx_tokens": 1730, "processing_result": "This is a Vim plugin module for interacting with the Llama AI chatbot. It provides functions for sending queries, processing responses, and managing the chat session. The module exports a single function, `vimqq#bots#llama#new()`, which creates a new Llama bot instance. The bot instance has methods for sending queries, processing responses, and updating usage metrics. The module also defines a set of default configuration options for the bot, including healthcheck interval, title tokens, max tokens, and system prompt. The Llama bot instance also has methods for sending warmup queries, processing stream responses, and generating titles. The module uses the `vimqq#jobs` module to start and manage jobs for sending queries and processing responses."}, "autoload/vimqq/bots/mistral.vim": {"path": "autoload/vimqq/bots/mistral.vim", "size": 6584, "checksum": "f55cdc7dfd604cf744215cb8c1689ddf", "processing_timestamp": "2024-10-09T16:05:20.042664", "approx_tokens": 1808, "processing_result": "This file defines a Mistral bot for the vimqq plugin. It provides functions for sending queries to the Mistral API, formatting messages, and handling responses. The bot can be configured with a title prompt, system prompt, and maximum tokens. It also keeps track of usage and updates the chat database. The file exports a function `vimqq#bots#mistral#new` that creates a new Mistral bot instance."}, "autoload/vimqq/bots/readme.txt": {"path": "autoload/vimqq/bots/readme.txt", "size": 180, "checksum": "dce1d38dfd48164553828527fedcf9b7", "processing_timestamp": "2024-10-09T16:05:20.042664", "approx_tokens": 35, "processing_result": "This file is a readme for the bots directory in the vimqq plugin. It mentions that the implementations of the bots are similar but are kept separate due to slight differences. It also mentions that the bots will be refactored and cleaned up once all bots are added."}, "autoload/vimqq/chatsdb.vim": {"path": "autoload/vimqq/chatsdb.vim", "size": 5055, "checksum": "42e07cc6457871411ee539d1c88bb467", "processing_timestamp": "2024-10-09T16:05:20.042664", "approx_tokens": 1408, "processing_result": "This file defines a chat database module for the vimqq plugin. It provides functions for managing chats, including creating new chats, appending messages, and updating titles. The database is stored in a JSON file and is loaded and saved as needed. The file exports a function `vimqq#chatsdb#new` that creates a new chat database instance."}, "autoload/vimqq/context/blame.vim": {"path": "autoload/vimqq/context/blame.vim", "size": 1414, "checksum": "37c95679f1ed7a849f427fa34169824a", "processing_timestamp": "2024-10-09T16:05:20.042664", "approx_tokens": 421, "processing_result": "This file defines a context blame module for the vimqq plugin. It provides a function `vimqq#context#blame#run` that runs a Git blame command on the current selection and returns a string containing the relevant commits from the history. The function uses the Git command `git blame` to get the commit hashes and then uses `git show` to get the commit messages."}, "autoload/vimqq/context/context.vim": {"path": "autoload/vimqq/context/context.vim", "size": 1574, "checksum": "47e13127a77d3c324c3a2efb354174fb", "processing_timestamp": "2024-10-09T16:07:12.642222", "approx_tokens": 452, "processing_result": "This file is the main entry point for VimQQ's context feature. It defines a function `vimqq#context#context#fill` that takes a message object and a dictionary of context modes. It then populates the message object with the corresponding context information. The context modes can include selection, file, ctags, project, and blame. The file also includes utility functions for getting the current file and visual selection."}, "autoload/vimqq/context/ctags.vim": {"path": "autoload/vimqq/context/ctags.vim", "size": 2740, "checksum": "41eac10578fc3dabe3751a89dddcae44", "processing_timestamp": "2024-10-09T16:07:12.642222", "approx_tokens": 806, "processing_result": "This file provides functionality for generating context information based on ctags. It defines a function `vimqq#context#ctags#run` that takes a selection and returns a list of relevant context lines. The function uses the `taglist` function to get a list of tags matching the selection and then extracts the relevant context lines from the corresponding files."}, "autoload/vimqq/context/github.vim": {"path": "autoload/vimqq/context/github.vim", "size": 3440, "checksum": "45b6c927cc4365a3baf88eb1802720e2", "processing_timestamp": "2024-10-09T16:07:12.642222", "approx_tokens": 1014, "processing_result": "This file provides functionality for generating context information from GitHub issues and pull requests. It defines a function `vimqq#context#github#run` that takes a selection and returns a list of relevant context lines. The function uses the GitHub API to search for issues and pull requests related to the selection and then extracts the relevant context lines."}, "autoload/vimqq/context/project.vim": {"path": "autoload/vimqq/context/project.vim", "size": 2163, "checksum": "165aa42d167e320f2cf4161888769865", "processing_timestamp": "2024-10-09T16:07:12.642222", "approx_tokens": 621, "processing_result": "This file provides functionality for generating context information based on the project files. It defines a function `vimqq#context#project#run` that takes a pattern and returns a list of relevant context lines. The function recursively lists all files matching the pattern in the project directory and then extracts the relevant context lines."}, "autoload/vimqq/fmt.vim": {"path": "autoload/vimqq/fmt.vim", "size": 2736, "checksum": "be534b86d0548de21e715cbb85b8f76a", "processing_timestamp": "2024-10-09T16:07:12.642222", "approx_tokens": 747, "processing_result": "This file provides functionality for formatting messages with context information. It defines a function `vimqq#fmt#content` that takes a message object and returns a formatted string. The function uses templates to insert the context information into the message. It also provides functions for formatting a single message and a list of messages."}, "autoload/vimqq/jobs.vim": {"path": "autoload/vimqq/jobs.vim", "size": 2379, "checksum": "86b91f12da3928b5328f61d7ec82fd7a", "processing_timestamp": "2024-10-09T16:09:19.153529", "approx_tokens": 734, "processing_result": "This file provides functionality for working with jobs in the Vim plugin vimqq. It includes functions for starting jobs and handling callbacks, as well as a function for keeping track of active jobs. The file also includes a function for transforming config objects to be compatible with Neovim.\n\nThe file defines two main functions: `vimqq#jobs#start` and `vimqq#jobs#start_nvim`. The `vimqq#jobs#start` function starts a job using the `job_start` function and checks if the job was successfully started. The `vimqq#jobs#start_nvim` function starts a job using the `jobstart` function and transforms the config object to be compatible with Neovim.\n\nThe file also defines a function `s:_is_empty_list` which checks if a list is empty, and a function `s:_keep_job` which keeps track of active jobs.\n\nRelationships: This file is likely used by other files in the vimqq plugin to start jobs and handle callbacks."}, "autoload/vimqq/log.vim": {"path": "autoload/vimqq/log.vim", "size": 1038, "checksum": "af1e464b9071b3b27584dcfb3ddc416e", "processing_timestamp": "2024-10-09T16:09:19.153529", "approx_tokens": 318, "processing_result": "This file provides logging functionality for the vimqq plugin. It defines a logger object with methods for logging messages at different levels (DEBUG, INFO, ERROR, NONE).\n\nThe file also defines a variable `g:vqq_log_file` to store the path to the log file, and a variable `g:vqq_log_level` to store the current log level.\n\nThe file uses the `writefile` function to write log messages to the log file.\n\nRelationships: This file is likely used by other files in the vimqq plugin to log messages."}, "autoload/vimqq/main.vim": {"path": "autoload/vimqq/main.vim", "size": 10102, "checksum": "db16e3e6b3976bb19e48553ce538712b", "processing_timestamp": "2024-10-09T16:09:19.153529", "approx_tokens": 2881, "processing_result": "This file provides the main functionality for the vimqq plugin. It defines a number of functions for interacting with the plugin's UI and data storage.\n\nThe file defines a number of variables and data structures to store the plugin's state, including a `s:ui` object to interact with the UI, a `s:chatsdb` object to store chat data, and a `s:bots` object to store bot data.\n\nThe file defines a number of functions to handle user interactions, including `vimqq#main#send_message`, `vimqq#main#send_warmup`, `vimqq#main#show_list`, and `vimqq#main#show_chat`.\n\nThe file also defines a number of functions to handle callbacks from the bots, including `s:_on_token_done`, `s:_on_reply_complete`, and `s:_on_title_done`.\n\nRelationships: This file is the main entry point for the vimqq plugin and is likely used by other files in the plugin to interact with the UI and data storage."}, "autoload/vimqq/metrics.vim": {"path": "autoload/vimqq/metrics.vim", "size": 789, "checksum": "098fde421558b13c18d2c70666519f84", "processing_timestamp": "2024-10-09T16:11:14.436848", "approx_tokens": 239, "processing_result": "This file contains functions for collecting and saving metrics in Vim. It \n      provides an API for incrementing and retrieving metrics, as well as saving \n      them to a JSON file. The file is autoloaded, meaning it's loaded only when \n      its functions are actually used. The metrics are saved to a file named \n      \"session_metrics.json\" in the data directory, with a timestamp in the \n      filename."}, "autoload/vimqq/path.vim": {"path": "autoload/vimqq/path.vim", "size": 489, "checksum": "80196006d765b7f4e4372ee5f1870f34", "processing_timestamp": "2024-10-09T16:11:14.436848", "approx_tokens": 148, "processing_result": "This file provides functions for working with file paths in Vim. It \n      includes functions for getting the path to log and data files, taking into \n      account the difference between Neovim and Vim. The functions return the \n      full path to the respective directories, with the filename appended."}, "autoload/vimqq/prompts.vim": {"path": "autoload/vimqq/prompts.vim", "size": 2569, "checksum": "4b70fb43a1accffc2031a46f06a7671b", "processing_timestamp": "2024-10-09T16:11:14.436848", "approx_tokens": 605, "processing_result": "This file defines prompts for use in the VimQQ plugin. It includes two \n      types of prompts: a chained prompt that asks the user to provide a \n      step-by-step explanation of their reasoning, and a repository index prompt \n      that asks the user to provide a detailed description of a code repository."}, "autoload/vimqq/state.vim": {"path": "autoload/vimqq/state.vim", "size": 4118, "checksum": "780cb98f2c6895e4389c1600253a155b", "processing_timestamp": "2024-10-09T16:11:14.436848", "approx_tokens": 1081, "processing_result": "This file provides a module for managing the state of the VimQQ plugin. \n      It includes functions for creating a new state object, which can be used to \n      manage chat sessions and queues. The state object includes methods for \n      getting and setting the current chat ID, enqueuing queries, and managing \n      latency tracking."}, "autoload/vimqq/ui.vim": {"path": "autoload/vimqq/ui.vim", "size": 8166, "checksum": "c1486aee0ac008af5600c0c678f2248e", "processing_timestamp": "2024-10-09T16:11:14.436848", "approx_tokens": 2017, "processing_result": "This file provides a module for managing the user interface of the VimQQ \n      plugin. It includes functions for displaying chat history, displaying \n      individual chats, and toggling the visibility of the chat window. The UI \n      module also includes a basic color scheme setup for the chat window."}, "doc/vimqq.txt": {"path": "doc/vimqq.txt", "size": 17238, "checksum": "d35cacef18fd16eb14bcade5c67c4464", "processing_timestamp": "2024-10-09T16:12:26.422077", "approx_tokens": 4192, "processing_result": "This is the documentation file for the Vim plugin \"vimqq\". It provides a detailed description of the plugin's features, installation, usage, commands, mappings, and configuration options. The plugin is designed to interact with AI models, such as Groq, Claude, and LLaMA, to provide context-aware responses to user queries. The file also includes a changelog and examples of basic configurations.\n\nThe plugin's key features include:\n\n* Support for both remote and local AI models\n* Flexible extra context options, such as visual selection, ctags, current file, entire project, and git blame history\n* Automated KV cache warmup for local model evaluation\n* Dynamic warmup on typing\n* Mixing different models in the same chat sessions\n* Ability to fork the existing chat and start a new branch of the chat\n* Support for both Vim and NeoVim\n\nThe file also provides detailed information on how to install, configure, and use the plugin, including examples of key mappings and commands. Overall, this file serves as a comprehensive guide to using the vimqq plugin."}, "local_deploy.sh": {"path": "local_deploy.sh", "size": 496, "checksum": "a444e0a9b7893b7ca115d585e84d2bcc", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 149, "processing_result": "This is a bash script that deploys the vimqq plugin to the user's local Vim configuration directory. The script copies the plugin files from the source directory to the destination directory, creating the directory structure as needed."}, "plugin/vimqq.vim": {"path": "plugin/vimqq.vim", "size": 1875, "checksum": "dbf00d9f0a2096edf5b14cc01a8b8ca8", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 549, "processing_result": "This is the main plugin file for vimqq. It defines various commands and functions for interacting with the plugin. The plugin provides a way to query a language model using the QQ and Q commands, and also provides functions for forking chats, toggling the plugin, and recording evaluations."}, "tests/data/chat_list_one.vim": {"path": "tests/data/chat_list_one.vim", "size": 469, "checksum": "632309e6952d3ebf7efa6365dfae482b", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 156, "processing_result": "This is a test file for the vimqq plugin. It tests the functionality of the QQ command with a single chat. The test creates a chat, sends a message, and then checks if the chat list is updated correctly."}, "tests/data/new_chat.vim": {"path": "tests/data/new_chat.vim", "size": 491, "checksum": "c08a6fcb4f48d2b4bd72c24a386db5ed", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 156, "processing_result": "This is a test file for the vimqq plugin. It tests the functionality of creating a new chat using the QQ command. The test creates a new chat, sends a message, and then checks if the chat list is updated correctly."}, "tests/data/new_chat_nodelay.vim": {"path": "tests/data/new_chat_nodelay.vim", "size": 427, "checksum": "360dcf445bc80e1804916e5289fde38e", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 138, "processing_result": "This is a test file for the vimqq plugin. It tests the functionality of creating a new chat using the QQ command without any delay. The test creates a new chat, sends a message, and then checks if the chat list is updated correctly."}, "tests/data/query.vim": {"path": "tests/data/query.vim", "size": 381, "checksum": "030f64dcb53251f8ec994575e5c8e4b2", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 121, "processing_result": "This is a test file for the vimqq plugin. It tests the functionality of sending a query to the language model using the Q command. The test sends a query, and then checks if the response is received correctly."}, "tests/data/query_twice.vim": {"path": "tests/data/query_twice.vim", "size": 477, "checksum": "d17e53604c34f1b93685d933d00f3f58", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 150, "processing_result": "This is a test file for the vimqq plugin. It tests the functionality of sending multiple queries to the language model using the Q command. The test sends two queries, and then checks if the responses are received correctly."}, "tests/data/queue.vim": {"path": "tests/data/queue.vim", "size": 398, "checksum": "c94b628c37e2353d5743b530119958ae", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 127, "processing_result": "This is a test file for the vimqq plugin. It tests the functionality of sending multiple queries to the language model using the Q command, and checks if the responses are received in the correct order."}, "tests/data/selection.vim": {"path": "tests/data/selection.vim", "size": 451, "checksum": "c6150495c28d39005c52490887e4f65a", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 149, "processing_result": "This is a test file for the vimqq plugin. It tests the functionality of sending a selection of text to the language model using the QQ command. The test selects some text, sends it to the language model, and then checks if the response is received correctly."}, "tests/data/warmup.vim": {"path": "tests/data/warmup.vim", "size": 399, "checksum": "61a2b814e2d5c1bd4faef4fd205a65c5", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 129, "processing_result": "This is a test file for the vimqq plugin. It tests the functionality of warming up the language model using the Q command. The test sends a warm-up query, and then checks if the response is received correctly."}, "tests/data/warmup_open.vim": {"path": "tests/data/warmup_open.vim", "size": 433, "checksum": "96cc3a3134a8fa9b833f16bfc8960395", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 140, "processing_result": "This is a test file for the vimqq plugin. It tests the functionality of warming up the language model using the Q command when the plugin is first opened. The test sends a warm-up query, and then checks if the response is received correctly."}, "tests/libtest.sh": {"path": "tests/libtest.sh", "size": 2069, "checksum": "9a5ca1342521ce96e39a497b762f3696", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 642, "processing_result": "This is a test library for the vimqq plugin. It provides a set of functions for setting up and running tests, including functions for finding an unused port, setting up the test environment, and running Vim with the test script."}, "tests/libtest.vim": {"path": "tests/libtest.vim", "size": 488, "checksum": "c1d8cd67de9adf29710337476dc36de3", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 150, "processing_result": "This is a test library for the vimqq plugin. It provides a function for comparing the content of two chats, which is used in the test files to verify that the plugin is working correctly."}, "tests/mock_llama.py": {"path": "tests/mock_llama.py", "size": 3323, "checksum": "42a10ad089ea7a83ff7fe238967ff148", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 774, "processing_result": "This is a mock language model server used for testing the vimqq plugin. It provides a simple API for sending queries and receiving responses, and is used in the test files to simulate the behavior of a real language model."}, "tests/readme.txt": {"path": "tests/readme.txt", "size": 1006, "checksum": "ff1b9c202937b671491ccccae8a687d1", "processing_timestamp": "2024-10-09T16:15:57.420116", "approx_tokens": 257, "processing_result": "This is a README file for the vimqq plugin tests. It provides information on how to run the tests, the requirements for running the tests, and the configuration options available for the tests. It also lists some potential improvements for the tests and some additional tests that could be written."}, "tests/run_all.sh": {"path": "tests/run_all.sh", "size": 1174, "checksum": "1cfb636c392a6ca784c6cc0882256144", "processing_timestamp": "2024-10-09T16:16:50.768449", "approx_tokens": 370, "processing_result": "This is a Bash script that runs all Vim tests located in the `data` directory. It takes an optional argument, the path to the Vimqq plugin, and iterates over all `.vim` files in the `data` directory. For each test, it runs the `run_one.sh` script, which executes the Vim test and checks its output against the expected result. The script reports the test results and exits with a non-zero status code if any tests fail."}, "tests/run_one.sh": {"path": "tests/run_one.sh", "size": 1726, "checksum": "137b8516ce6fc4046ea2b2a87aea9501", "processing_timestamp": "2024-10-09T16:16:50.768449", "approx_tokens": 487, "processing_result": "This is a Bash script that runs a single Vim test. It takes two arguments: the path to the Vimqq plugin and the name of the test. The script sets up a mock server, prepares the test environment, and runs the Vim test using the `run_vim_test` function. It then checks the test output against the expected result and reports the test result. The script uses several functions from the `libtest.sh` library, including `setup_vimqq_env`, `setup_mock_serv`, and `run_vim_test`."}, "todo.txt": {"path": "todo.txt", "size": 466, "checksum": "97cf44df90f91e3651124b8e3b56525c", "processing_timestamp": "2024-10-09T16:16:50.768449", "approx_tokens": 117, "processing_result": "This is a text file containing a list of to-do items and ideas for future development. The items include implementing features such as caching, context generalization, and tool use, as well as testing the plugin on Windows and exploring the use of other providers and models."}}, "dirs": {"autoload/vimqq/bots": {"processing_result": "This directory contains Vim plugin modules for interacting with various AI chatbots, including Claude, Groq, Llama, and Mistral. The modules provide functions for sending queries, processing responses, and managing the chat session. Each bot module exports a single function, `vimqq#bots#[bot_name]#new()`, which creates a new bot instance. The bot instances have methods for sending queries, processing responses, and updating usage metrics.\n\nThe modules also define default configuration options for the bots, including API keys, title tokens, max tokens, and system prompts. Some bots, like Llama, have additional methods for sending warmup queries, processing stream responses, and generating titles.\n\nThe `bots.vim` file provides a bot manager class that creates and manages a list of bot instances. It defines several variables and functions to manage the bot instances, including validation, creation, and selection of bots.\n\nThe `readme.txt` file provides an overview of the bots directory and mentions that the implementations of the bots are similar but are kept separate due to slight differences. It also mentions that the bots will be refactored and cleaned up once all bots are added.\n\nThe directory contains the following files:\n\n* `bots.vim`: bot manager class\n* `claude.vim`: Claude bot module\n* `groq.vim`: Groq bot module\n* `llama.vim`: Llama bot module\n* `mistral.vim`: Mistral bot module\n* `readme.txt`: readme file for the bots directory\n\nOverall, this directory provides a collection of Vim plugin modules for interacting with various AI chatbots, with a focus on managing and configuring the bots.", "checksum": "37463a56b389b2767021c03ca64e7e23"}, "autoload/vimqq/context": {"processing_result": "This directory contains modules for generating context information for the VimQQ plugin. It includes modules for blame, context, ctags, GitHub, and project context. The main entry point is the `context.vim` file, which defines a function `vimqq#context#context#fill` that populates a message object with context information based on the provided context modes.\n\nThe `blame.vim` module provides functionality for generating context information from Git blame, using the `git blame` and `git show` commands.\n\nThe `ctags.vim` module generates context information based on ctags, using the `taglist` function to get a list of tags matching the selection.\n\nThe `github.vim` module uses the GitHub API to search for issues and pull requests related to the selection and extracts relevant context lines.\n\nThe `project.vim` module generates context information based on project files, recursively listing all files matching a pattern in the project directory and extracting relevant context lines.\n\nThese modules are used by the `context.vim` file to provide a flexible and modular way of generating context information for the VimQQ plugin.", "checksum": "5ffd06619606fb660a690d6f88075d13"}, "autoload/vimqq": {"processing_result": "This directory contains the core functionality of the VimQQ plugin. It includes a collection of modules and scripts that provide various features, such as interacting with AI chatbots, managing chat sessions, and displaying chat history.\n\nThe directory is organized into several subdirectories and files, each with its own specific functionality. The `bots` directory contains modules for interacting with various AI chatbots, including Claude, Groq, Llama, and Mistral. The `context` directory contains modules for generating context information for the plugin. The `autowarm`, `base`, `chatsdb`, `fmt`, `jobs`, `log`, `main`, `metrics`, `path`, `prompts`, `state`, and `ui` files provide additional functionality, such as autowarming, callback management, chat database management, formatting, job management, logging, main plugin functionality, metrics collection, path manipulation, prompts, state management, and user interface management.\n\nThe plugin uses several variables and functions to manage its state, including `g:vqq_log_file` for logging, `g:vqq_log_level` for log level management, and `s:ui` for interacting with the user interface. The plugin also uses a callback system to manage interactions between different modules and scripts.\n\nOverall, this directory provides a comprehensive framework for building a chatbot-powered Vim plugin, with a focus on modularity, flexibility, and ease of use.", "checksum": "e704889b7a6a94c0b17389edb01b0d04"}, "autoload": {"processing_result": "n/a", "checksum": "e18d4ccedc3772434f23eaf18eecd428", "skipped": true}, "doc": {"processing_result": "This directory contains documentation for the Vim plugin \"vimqq\". The provided documentation file, vimqq.txt, offers a comprehensive guide to the plugin's features, installation, usage, commands, mappings, and configuration options. It highlights the plugin's key features, such as support for remote and local AI models, flexible extra context options, and automated KV cache warmup. The file also provides detailed information on how to install, configure, and use the plugin, including examples of key mappings and commands. Overall, this directory serves as a central location for understanding and utilizing the vimqq plugin.", "checksum": "c1c100fcd46b03633a8ed2b0eb12f296"}, "plugin": {"processing_result": "The plugin directory contains the core functionality of vimqq. The main plugin file, vimqq.vim, defines various commands and functions for interacting with the plugin, including querying a language model, forking chats, toggling the plugin, and recording evaluations.", "checksum": "b72ccbcd513ebf80bf225ef91828ec57"}, "tests/data": {"processing_result": "This directory contains a set of test files for the vimqq plugin. The tests cover various aspects of the plugin's functionality, including creating new chats, sending queries to the language model, and handling responses. The tests are written in Vim script and are designed to ensure that the plugin works correctly in different scenarios.\n\nThe tests can be broadly categorized into several groups:\n\n* Chat creation and management: These tests (chat_list_one.vim, new_chat.vim, new_chat_nodelay.vim) verify that the plugin can create new chats, update the chat list, and handle chat-related commands correctly.\n* Query sending and response handling: These tests (query.vim, query_twice.vim, queue.vim) check that the plugin can send queries to the language model, receive responses, and handle multiple queries correctly.\n* Text selection and sending: The selection.vim test verifies that the plugin can send selected text to the language model and receive a response correctly.\n* Warm-up functionality: The warmup.vim and warmup_open.vim tests ensure that the plugin can warm up the language model correctly, both when the plugin is first opened and during normal operation.\n\nOverall, these tests provide comprehensive coverage of the vimqq plugin's functionality and help ensure that it works correctly in a variety of situations.", "checksum": "25627b20de380db6afcfd5b61eef8ef8"}, "tests": {"processing_result": "This directory contains a comprehensive test suite for the vimqq plugin. The tests are organized into several subdirectories and files, which provide a thorough coverage of the plugin's functionality.\n\nThe test suite consists of two main components: the `data` subdirectory and the test scripts. The `data` subdirectory contains a set of Vim script files that test various aspects of the plugin's functionality, including chat creation and management, query sending and response handling, text selection and sending, and warm-up functionality.\n\nThe test scripts, including `libtest.sh`, `libtest.vim`, `mock_llama.py`, `run_all.sh`, and `run_one.sh`, provide the infrastructure for running the tests. The `libtest.sh` and `libtest.vim` files contain utility functions for setting up and running tests, while the `mock_llama.py` file provides a mock language model server for simulating the behavior of a real language model. The `run_all.sh` script runs all Vim tests located in the `data` directory, while the `run_one.sh` script runs a single Vim test.\n\nThe `readme.txt` file provides information on how to run the tests, the requirements for running the tests, and the configuration options available for the tests. It also lists some potential improvements for the tests and some additional tests that could be written.\n\nOverall, the tests in this directory provide a comprehensive coverage of the vimqq plugin's functionality and help ensure that it works correctly in a variety of situations.", "checksum": "8dc8a80c12f1bb24390870a70caf57b0"}, "": {"processing_result": "n/a", "checksum": "b52da1fc71e9e3150970201762622307", "skipped": true}}}